package amiibo

import (
	"bytes"
	"encoding/hex"
	"testing"
)

func loadDummyNtag(t *testing.T) *NTAG215 {
	data := [540]byte{}
	copy(data[:], readFile(t, testDummyNtag))
	return NewNTAG215(data)
}

func TestNTAG215_Raw(t *testing.T) {
	got := loadDummyNtag(t).Raw()
	want := dummyAmiibo()

	if !bytes.Equal(got, want) {
		t.Errorf("got:\n%s want:\n%s", hex.Dump(got), hex.Dump(want))
	}
}

func TestNTAG215_FullUID(t *testing.T) {
	tag := loadDummyNtag(t)
	full := dummyFullUid()

	tests := []struct {
		got  byte
		want byte
	}{
		{tag.UID0(), full[0]},
		{tag.UID1(), full[1]},
		{tag.UID2(), full[2]},
		{tag.BCC0(), full[3]},
		{tag.UID3(), full[4]},
		{tag.UID4(), full[5]},
		{tag.UID5(), full[6]},
		{tag.UID6(), full[7]},
		{tag.BCC1(), full[8]},
	}

	for _, test := range tests {
		if test.got != test.want {
			t.Errorf("got %#02x, want  %#02x", test.got, test.want)
		}
	}

	got := tag.UID()
	want := []byte{full[0], full[1], full[2], full[4], full[5], full[6], full[7]}
	if !bytes.Equal(got, want) {
		t.Errorf("got %#07x, want %#07x", got, want)
	}

	got = tag.FullUID()
	if !bytes.Equal(got, full) {
		t.Errorf("got %#09x, want %#09x", got, full)
	}
}

func TestNTAG215_SetUID(t *testing.T) {
	tag := loadDummyNtag(t)
	want := [9]byte{}
	copy(want[:], randomBytes(9))

	err := tag.SetUID(want)
	if err == nil {
		t.Error("got nil, want error")
	}

	want = validFullUid()
	err = tag.SetUID(want)
	if err != nil {
		t.Errorf("got %s, want nil", err)
	}
	got := tag.FullUID()
	if !bytes.Equal(got, want[:]) {
		t.Errorf("got %#09x, want %#09x", got, want)
	}
}

func TestNTAG215_ValidateUID(t *testing.T) {
	if loadDummyNtag(t).ValidateUID() {
		t.Error("got true, want false")
	}
}

func TestNTAG215_RandomiseUid(t *testing.T) {
	tag := loadDummyNtag(t)

	old := tag.FullUID()
	tag.RandomiseUid(0x04)
	got := tag.FullUID()

	if bytes.Equal(got, old) {
		t.Error("UID not randomised")
	}
}

func TestAmiibo_Int(t *testing.T) {
	amiibo := loadDummyAmiibo(t)
	got := amiibo.Int()
	want := dummyIntData()

	if got != want {
		t.Errorf("got %#02x, want %#02x", got, want)
	}
}

func TestNTAG215_StaticLockBytes(t *testing.T) {
	tag := loadDummyNtag(t)
	slb := dummyStaticLockData()

	tests := []struct {
		got  byte
		want byte
	}{
		{tag.Lock0(), slb[0]},
		{tag.Lock1(), slb[1]},
	}

	for _, test := range tests {
		if test.got != test.want {
			t.Errorf("got %#02x, want  %#02x", test.got, test.want)
		}
	}

	got := tag.StaticLockBytes()
	if !bytes.Equal(got, slb) {
		t.Errorf("got %#04x, want %#04x", got, slb)
	}
}

func TestNTAG215_CapabilityContainer(t *testing.T) {
	tag := loadDummyNtag(t)

	got := tag.CapabilityContainer()
	want := dummyCapabilityContainerData()

	if !bytes.Equal(got, want) {
		t.Errorf("got %#04x, want %#04x", got, want)
	}
}

func TestNTAG215_UserData(t *testing.T) {
	tag := loadDummyNtag(t)

	want := []byte{
		0xbf, 0x66, 0x59, 0x86, 0xb6, 0x87, 0x76, 0xb9, 0x05, 0xcb, 0xfc, 0xbf, 0x11, 0x13, 0x90, 0x4a, 0x9f, 0x5f,
		0x0c, 0x4f, 0x34, 0x15, 0xe6, 0x5f, 0x8f, 0x36, 0x67, 0xbe, 0x3c, 0xa5, 0xbf, 0x91, 0xf3, 0x16, 0x63, 0x76,
		0xeb, 0x4e, 0x2d, 0x62, 0xc0, 0xdf, 0xda, 0x26, 0x27, 0x6f, 0x97, 0x36, 0xb4, 0x9b, 0x09, 0x3e, 0x5f, 0xc9,
		0x47, 0xea, 0x7a, 0xe0, 0xc2, 0xd5, 0x6a, 0x74, 0x3d, 0x4b, 0xc5, 0x63, 0x60, 0xee, 0x19, 0x93, 0x08, 0x72,
		0xdf, 0x8c, 0x0d, 0xce, 0x17, 0xd5, 0x00, 0xd3, 0x29, 0xf5, 0xa0, 0xb1, 0xe7, 0x70, 0x34, 0x01, 0xb3, 0x3f,
		0x12, 0x5b, 0x9c, 0x6b, 0x18, 0xab, 0xf8, 0x3d, 0xaf, 0x92, 0xee, 0x83, 0xe6, 0x71, 0xb1, 0x90, 0x26, 0xdc,
		0x2e, 0x2d, 0x0e, 0x31, 0xf1, 0xfa, 0xb3, 0xb7, 0xe5, 0xe6, 0x37, 0x8a, 0xb4, 0x29, 0xfa, 0xb5, 0xb5, 0x22,
		0xc0, 0xf3, 0x42, 0x12, 0x3a, 0xbd, 0xdf, 0xa9, 0x40, 0xdf, 0x97, 0x57, 0x0b, 0x6f, 0x30, 0xc5, 0xa6, 0x26,
		0x65, 0xe8, 0x55, 0xc8, 0x3e, 0xb7, 0x76, 0xe5, 0x48, 0xe3, 0xe7, 0xf2, 0x56, 0x5f, 0xa3, 0xf5, 0x38, 0xae,
		0x87, 0xe4, 0xf5, 0x91, 0x1e, 0x32, 0x66, 0xe1, 0x1a, 0x6e, 0xf1, 0x39, 0x23, 0x9b, 0xd7, 0xad, 0x60, 0x98,
		0xb9, 0xa6, 0x27, 0xf6, 0x67, 0x2c, 0x02, 0xe4, 0x2c, 0x16, 0xad, 0x70, 0x23, 0x43, 0xfb, 0x0c, 0xaa, 0xa8,
		0x11, 0x12, 0x7f, 0xe2, 0x91, 0xf6, 0x61, 0x9d, 0xd2, 0xd7, 0x52, 0xfa, 0x67, 0x0f, 0x70, 0xe0, 0xcf, 0x0d,
		0x65, 0x44, 0x7e, 0xbc, 0xff, 0xff, 0x16, 0x79, 0xe1, 0xc3, 0x6a, 0xe2, 0x76, 0x78, 0x57, 0x42, 0x7d, 0x7a,
		0x7e, 0x7f, 0xa8, 0xa8, 0xb3, 0x3b, 0xea, 0xad, 0x3d, 0x4d, 0x56, 0x21, 0x43, 0xf1, 0xd3, 0x3e, 0x90, 0x16,
		0x26, 0xda, 0x62, 0xc9, 0x54, 0x00, 0xaa, 0x71, 0x83, 0x66, 0xd4, 0x3b, 0xe2, 0xdc, 0x1c, 0xd3, 0xff, 0x59,
		0x7f, 0xf5, 0x28, 0x99, 0xc0, 0xfc, 0x8e, 0x9f, 0x7f, 0xce, 0x28, 0x9b, 0xbc, 0x01, 0x9c, 0x78, 0xc7, 0xde,
		0xf1, 0x25, 0xa4, 0x6f, 0x6c, 0x39, 0x05, 0xaf, 0x2f, 0x8b, 0xe9, 0x10, 0xe7, 0x92, 0x94, 0x48, 0xdd, 0xbc,
		0x59, 0x8c, 0x3e, 0x4b, 0xb9, 0xe9, 0x99, 0x85, 0x79, 0x74, 0x70, 0xaa, 0x0d, 0x50, 0xb7, 0xb8, 0x7b, 0xc1,
		0xc3, 0xad, 0x94, 0x07, 0xd1, 0xd2, 0x34, 0xe2, 0x7e, 0xed, 0xa8, 0x57, 0xc1, 0x5f, 0x42, 0x86, 0xb6, 0x94,
		0x2f, 0x63, 0xed, 0x73, 0xc3, 0x75, 0xd3, 0x39, 0x6b, 0x7e, 0xc2, 0x3c, 0xf2, 0xdd, 0xf3, 0xbe, 0x98, 0xea,
		0xcc, 0xf6, 0x8c, 0xe3, 0x7f, 0x7f, 0x8a, 0x17, 0x80, 0x1f, 0x9f, 0xe7, 0x0d, 0xcc, 0x72, 0xa7, 0x04, 0xfa,
		0x58, 0xee, 0xcb, 0x3e, 0x24, 0x42, 0xf0, 0xab, 0xcb, 0xe9, 0xe4, 0xe8, 0x31, 0x86, 0x96, 0x60, 0xae, 0x1d,
		0x61, 0x79, 0x77, 0x20, 0x42, 0x21, 0xc7, 0x2d, 0x81, 0xc6, 0xd6, 0xd6, 0x74, 0xae, 0xb4, 0xf8, 0x30, 0x5e,
		0xb6, 0xba, 0x5d, 0x56, 0x7d, 0x11, 0x3f, 0x79, 0x93, 0x84, 0xcb, 0xd9, 0x1e, 0x3c, 0x8c, 0xe2, 0x0c, 0xb5,
		0x05, 0xed, 0xfb, 0x39, 0xf1, 0x7f, 0x2b, 0x69, 0x7b, 0x7a, 0xa4, 0x44, 0x6a, 0x37, 0x09, 0x13, 0x23, 0x4c,
		0x45, 0x77, 0xa8, 0xbe, 0xb7, 0xbc, 0xc4, 0x11, 0xfa, 0x1d, 0x37, 0x71, 0x0d, 0x36, 0x52, 0x40, 0x93, 0x5d,
		0x4f, 0x74, 0x7d, 0x78, 0x11, 0x62, 0x95, 0xa9, 0x13, 0x75, 0x26, 0x1d, 0x35, 0x21, 0x54, 0x27, 0xd7, 0x0e,
		0x93, 0x18, 0x77, 0x85, 0x7e, 0x95, 0x12, 0xac, 0x50, 0x89, 0x51, 0x83, 0xd2, 0x2f, 0xf5, 0xed, 0xad, 0x66,
	}
	got := tag.UserData()

	if !bytes.Equal(got, want) {
		t.Errorf("got:\n%s want\n%s", hex.Dump(got), hex.Dump(want))
	}
}

func TestNTAG215_SetUserData(t *testing.T) {
	tag := loadDummyNtag(t)
	want := [504]byte{}
	want[0] = byte(0x55)
	want[503] = byte(0xff)

	tag.SetUserData(want)
	got := tag.UserData()

	if !bytes.Equal(got, want[:]) {
		t.Errorf("got:\n%s want\n%s", hex.Dump(got), hex.Dump(want[:]))
	}
}

func TestNTAG215_DynamicLockBytes(t *testing.T) {
	tag := loadDummyNtag(t)
	dlb := dummyDynamicLockData()

	tests := []struct {
		got  byte
		want byte
	}{
		{tag.DLock0(), dlb[0]},
		{tag.DLock1(), dlb[1]},
		{tag.DLock2(), dlb[2]},
	}

	for _, test := range tests {
		if test.got != test.want {
			t.Errorf("got %#02x, want  %#02x", test.got, test.want)
		}
	}

	got := tag.DynamicLockBytes()
	if !bytes.Equal(got, dlb) {
		t.Errorf("got %#06x, want %#06x", got, dlb)
	}
}

func TestNTAG215_CFGx(t *testing.T) {
	tag := loadDummyNtag(t)

	tests := []struct {
		got  []byte
		want []byte
	}{
		{tag.CFG0(), []byte{0x00, 0x00, 0x00, 0x4}},
		{tag.CFG1(), []byte{0x5f, 0x00, 0x00, 0x00}},
	}

	for _, test := range tests {
		if !bytes.Equal(test.got, test.want) {
			t.Errorf("got %#04x, want %#04x", test.got, test.want)
		}
	}
}

func TestNTAG215_Password(t *testing.T) {
	tag := loadDummyNtag(t)

	got := tag.Password()
	want := []byte{0x00, 0x00, 0x00, 0x00}

	if !bytes.Equal(got, want) {
		t.Errorf("got %#04x, want %#04x", got, want)
	}
}

func TestNTAG215_SetPassword(t *testing.T) {
	tag := loadDummyNtag(t)

	want := [4]byte{0xff, 0xaa, 0x55, 0x99}
	tag.SetPassword(want)
	got := tag.Password()

	if !bytes.Equal(got, want[:]) {
		t.Errorf("got %#04x, want %#04x", got, want)
	}
}

func TestNTAG215_PasswordAcknowledge(t *testing.T) {
	tag := loadDummyNtag(t)

	want := []byte{0x00, 0x00}
	got := tag.PasswordAcknowledge()

	if !bytes.Equal(got, want) {
		t.Errorf("got %#02x, want %#02x", got, want)
	}
}

func TestNTAG215_SetPasswordAcknowledge(t *testing.T) {
	tag := loadDummyNtag(t)

	want := [2]byte{0xcc, 0xaa}
	tag.SetPasswordAcknowledge(want)
	got := tag.PasswordAcknowledge()

	if !bytes.Equal(got, want[:]) {
		t.Errorf("got %#02x, want %#02x", got, want)
	}
}

func TestNTAG215_RFUI(t *testing.T) {
	tag := loadDummyNtag(t)

	got := tag.RFUI()
	want := []byte{0x00, 0x00}

	if !bytes.Equal(got, want) {
		t.Errorf("got %#02x, want %#02x", got, want)
	}
}
